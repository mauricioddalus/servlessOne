service: apiServlessOne

provider:
  name: aws
  runtime: nodejs4.3
  region: us-east-1
  stage: dev

  db_test: test_table
  version: v1

package:
  exclude:
    - .git
    - .gitignore
    - resources/items/.json
    - resources/item/.json
    - serverless-doc.md
    - serverless*
    - test/**
    - node_modules/**

#Roles 
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: [
        { "Fn::Join": [ ":", [
              "arn:aws:dynamodb",
              { "Ref": "AWS::Region" },
              { "Ref": "AWS::AccountId" },
              "table/${self:provider.db_test}"
            ] ] },
        { "Fn::Join": [ ":",[
              "arn:aws:dynamodb",
              { "Ref": "AWS::Region" },
              { "Ref": "AWS::AccountId" },
              "table/${self:provider.db_test}/*"
            ] ] }
      ]
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"

functions:
  # ENDPOINT ${stage}/${version}/items
  createItem:
    name: ${self:service}-${self:provider.stage}-createItem
    description: Função para criação de items em ambiente de ${self:provider.stage}
    handler: resources/items/post.main
    memorySize: 128 
    timeout: 10
    events:
      - http:
          path: ${self:provider.stage}/${self:provider.version}/items
          method: POST

  getItems:
    name: ${self:service}-${self:provider.stage}-getItems
    description: Função para retorno de items em ambiente de ${self:provider.stage}
    handler: resources/items/get.main
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: ${self:provider.stage}/${self:provider.version}/items
          method: GET

  # ENDPOINT ${stage}/${version}/items/{itemId}
  updateItem:
    name: ${self:service}-${self:provider.stage}-updateItem
    handler: resources/item/update.main
    memorySize: 128 
    timeout: 10
    events:
      - http:
          path: ${self:provider.stage}/${self:provider.version}/items/{itemId}
          method: put

  getItem:
    name: ${self:service}-${self:provider.stage}-getItem
    handler: resources/item/get.main
    memorySize: 128 
    timeout: 10
    events:
      - http:
          path: ${self:provider.stage}/${self:provider.version}/items/{itemId}
          method: get

  deleteItem:
    name: ${self:service}-${self:provider.stage}-deleteItem
    handler: resources/item/delete.main
    memorySize: 128 
    timeout: 10
    events:
      - http:
          path: ${self:provider.stage}/${self:provider.version}/items/{itemId}
          method: delete


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    ThumbnailsBucket:
#      Type: AWS::S3::Bucket
#      Properties:
         # You can also set properties for the resource, based on the CloudFormation properties
#         BucketName: my-new-crazy-bucket
         # Or you could reference an environment variable
         # BucketName: ${env:BUCKET_NAME}